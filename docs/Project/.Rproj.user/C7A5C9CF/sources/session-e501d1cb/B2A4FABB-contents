library(corrplot)
library(readODS)
library(ISLR)
library(leaps)
set.seed(123)

white_wine <- read.csv("D:/Downloads/winequality-white.csv", header = TRUE, sep = ";")
red_wine <- read.csv("D:/Downloads/winequality-red.csv", header = TRUE, sep = ";")


column_names <- c("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", 
                  "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", 
                  "pH", "sulphates", "alcohol", "quality")


#basic correlation matrices to understand the relationship between variables
corrplot(cor(white_wine), order='alphabet')
corrplot(cor(red_wine), order='alphabet')


#dimensions of the red and white wine data sets
dim(white_wine)
dim(red_wine)

# white wine code to understand correlation between the number of variables
regfit.full1=regsubsets(quality~.,data = white_wine, nvmax = 11)
white_reg.summary <- summary(regfit.full1)
names(white_reg.summary)
white_reg.summary$rsq

# red wine code to understand correlation between the number of variables
regfit.full=regsubsets(quality~.,data = red_wine, nvmax = 11)
red_reg.summary <- summary(regfit.full)
names(red_reg.summary)
red_reg.summary$rsq

#plotting the number of variables for the red wine versus Adjusted RSQ, CP, and BIC
par(mfrow=c(2,2))
plot(red_reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(red_reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted Rsq", type = "l")
which.max(red_reg.summary$adjr2)
points (8, red_reg.summary$adjr2[8], col ="red",cex =2, pch =20)
plot(red_reg.summary$cp ,xlab =" Number of Variables ",ylab="Cp",type="l")
which.min((red_reg.summary$cp))
points (7, red_reg.summary$cp [7], col ="red",cex =2, pch =20)
which.min(red_reg.summary$bic)
plot(red_reg.summary$bic ,xlab=" Number of Variables ",ylab=" BIC", type="l")
points(6, red_reg.summary$bic [6], col="red",cex = 2, pch =20)


#plotting the number of variables for the white wine versus Adjusted RSQ, CP, and BIC
par(mfrow=c(2,2))
plot(white_reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(white_reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted Rsq", type = "l")
which.max(white_reg.summary$adjr2)
points (8, white_reg.summary$adjr2[8], col ="red",cex =2, pch =20)
plot(white_reg.summary$cp ,xlab =" Number of Variables ",ylab="Cp",type="l")
which.min(white_reg.summary$cp)
points (8, white_reg.summary$cp [8], col ="red",cex =2, pch =20)
which.min(white_reg.summary$bic)
plot(white_reg.summary$bic ,xlab=" Number of Variables ",ylab=" BIC", type="l")
points (8, white_reg.summary$bic [8], col =" red",cex =2, pch =20)

#white wine
plot(regfit.full1, scale="r2")
plot(regfit.full1, scale="adjr2")
plot(regfit.full1, scale="Cp")
plot(regfit.full1, scale="bic")
coef(regfit.full1,4)


#red wine
plot(regfit.full, scale="r2")
plot(regfit.full, scale="adjr2")
plot(regfit.full, scale="Cp")
plot(regfit.full, scale="bic")
coef(regfit.full,4)


#white wine
regfit.fwd = regsubsets(quality ~ ., data = white_wine, nvmax = 11, method = "forward")
summary(regfit.fwd)
regfit.bwd = regsubsets(quality ~ ., data = white_wine, nvmax = 11, method = "backward")
summary(regfit.bwd)

coef(regfit.full,4)
coef(regfit.fwd,4)
coef(regfit.bwd,4)

train1 = sample(c(TRUE, FALSE), nrow(white_wine),rep=TRUE)
test1=(!train1)

regfit.best1=regsubsets(quality~.,data = white_wine[train1,],
                       nvmax=11)
test.mat1 =  model.matrix(quality~.,data = white_wine[test1,])

val.errors = rep(NA,11)
for(i in 1:11){
coefi=coef(regfit.best ,id=i)
pred=test.mat1 [,names(coefi)]%*% coefi
val.errors [i]= mean(( white_wine$quality[test1]-pred)^2)
}

val.errors
which.min(val.errors)
coef(regfit.best1,6)


#red wine
regfit.fwd = regsubsets(quality ~ ., data = red_wine, nvmax = 11, method = "forward")
summary(regfit.fwd)
regfit.bwd = regsubsets(quality ~ ., data = red_wine, nvmax = 11, method = "backward")
summary(regfit.bwd)

coef(regfit.full,4)
coef(regfit.fwd,4)
coef(regfit.bwd,4)

train = sample(c(TRUE, FALSE), nrow(red_wine),rep=TRUE)
test=(!train)

regfit.best=regsubsets(quality~.,data = red_wine[train,],
                       nvmax=11)
test.mat =  model.matrix(quality~.,data = red_wine[test,])

val.errors = rep(NA,11)
for(i in 1:11){
  coefi=coef(regfit.best ,id=i)
  pred=test.mat [,names(coefi)]%*% coefi
  val.errors [i]= mean(( red_wine$quality[test]-pred)^2)
}

val.errors
which.min(val.errors)
coef(regfit.best,6)




