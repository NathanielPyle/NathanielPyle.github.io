return(data)
}
# Inspect 'Impact Time' column types across files
inspect_impact_time <- function(files) {
lapply(files, function(file) {
data <- if (grepl("\\.csv$", file)) {
read_csv(file, show_col_types = FALSE)
} else {
read_excel(file)
}
if ("Impact Time" %in% colnames(data)) {
return(class(data[["Impact Time"]]))
} else {
return("Column Missing")
}
})
}
# Explicitly process 'Impact Time' in the process_files function
process_files <- function(directory, mapping, types) {
# List all CSV and XLSX files
csv_files <- list.files(directory, pattern = "\\.csv$", full.names = TRUE)
xlsx_files <- list.files(directory, pattern = "\\.xlsx$", full.names = TRUE)
# Process CSV files
csv_data <- lapply(csv_files, function(file) {
data <- read_csv(file, show_col_types = FALSE)  # Quiet type messages
standardized_data <- standardize_columns(data, mapping)
enforced_data <- enforce_data_types(standardized_data, types)
# Explicitly handle 'Impact Time'
if ("Impact Time" %in% colnames(enforced_data)) {
enforced_data[["Impact Time"]] <- as.POSIXct(enforced_data[["Impact Time"]], format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
}
return(enforced_data)
})
# Process XLSX files
xlsx_data <- lapply(xlsx_files, function(file) {
data <- read_excel(file)
standardized_data <- standardize_columns(data, mapping)
enforced_data <- enforce_data_types(standardized_data, types)
# Explicitly handle 'Impact Time'
if ("Impact Time" %in% colnames(enforced_data)) {
enforced_data[["Impact Time"]] <- as.POSIXct(enforced_data[["Impact Time"]], format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
}
return(enforced_data)
})
# Combine all data into a single data frame
combined_data <- bind_rows(csv_data, xlsx_data)
return(combined_data)
}
# Check 'Impact Time' types
print("Inspecting 'Impact Time' types in CSV files:")
print(inspect_impact_time(list.files(games_directory_path, pattern = "\\.csv$", full.names = TRUE)))
print("Inspecting 'Impact Time' types in XLSX files:")
print(inspect_impact_time(list.files(games_directory_path, pattern = "\\.xlsx$", full.names = TRUE)))
# Process all files
final_data <- process_files(games_directory_path, column_mapping, expected_types)
# Inspect the combined data
print("Combined Data:")
print(head(final_data))
colnames(final_data)
final_data <- final_data %>%
select(-`Colour`, -`Row`, -`Name`, -`Warmup`, -`Impact Time`)
colnames(final_data)
View(final_data)
final_data$`Max g`
final_data$Max_g
distinct(final_data$Max_g)
type(final_data$Max_g)
class(final_data$Max_g)
class(final_data$`Max g`)
# Function to extract Impact Time from "All_Labels" column
extract_impact_time <- function(all_labels_column) {
# Regular expression to extract "Impact Time" in the format HH:MM:SS.ms
match <- str_extract(all_labels_column, "Impact Time:\\d{2}:\\d{2}:\\d{2}\\.\\d{2}")
return(match)
}
# Apply the function to the "All Labels" column
final_data <- final_data %>%
mutate(Impact_Time = extract_impact_time(`All Labels`))
# View the resulting dataframe
head(final_data)
# Get unique values of Impact_Time
unique_times <- final_data %>% distinct(Impact_Time)
# View unique values of Impact_Time
print(unique_times)
colnames(final_data)
final_data <- final_data %>%
mutate(
Headgear = coalesce(`Headgear...15`, `Headgear...16`, `Headgear...17`, `Headgear...18`, Headgear)
) %>%
select(-`Headgear...15`, -`Headgear...16`, -`Headgear...17`, -`Headgear...18`)
# View the updated dataframe to ensure the change
View(final_data)
colnames(final_data)
class(final_data$`Max g`)
class(final_data$Max_g)
final_data
class(final_data$`Max g`)
class(final_data$Max_g)
final_data
class(final_data$`Max g`)
class(final_data$Max_g)
final_data$`Max g`
final_data$Max_g
final_data <- final_data %>%
mutate(
Max_g = coalesce(`Max g`, Max_g, 0)
)
final_data <- final_data %>%
mutate(
`Max g` = as.numeric(str_trim(`Max g`)),
Max_g = as.numeric(str_trim(Max_g))
)
print("Summary of 'Max g' after conversion:")
print(summary(final_data$`Max g`))
print("Summary of 'Max_g' after conversion:")
print(summary(final_data$Max_g))
final_data <- final_data %>%
mutate(Max_g_combined = coalesce(`Max g`, Max_g))
final_data$Max_g_combined
final_data <- final_data %>%
select(-`Max g`, -Max_g)
final_data$Max_g_combined
class(final_data$`Max_rad`)
class(final_data$`Max rad/s²`)
final_data <- final_data %>%
mutate(
`Max_rad` = as.numeric(str_trim(`Max_rad`)),
`Max rad/s²`= as.numeric(str_trim(`Max rad/s²`))
)
final_data <- final_data %>%
mutate(Max_rad_combined = coalesce(`Max_rad`,`Max rad/s²`))
final_data$Max_rad_combined
final_data <- final_data %>%
select(-`Max_rad`, -`Max rad/s²`)
na_summary <- final_data %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "NA_count_{.col}"))
print(na_summary)
colnames(final_data)
final_data <- final_data %>% filter(!is.na(`Session Id`))
final_data <- final_data %>% filter(!is.na(`Impact Id`))
na_summary <- final_data %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "NA_count_{.col}"))
print(na_summary)
summary(na_summary)
colnames(final_data)
# Load necessary library
library(dplyr)
# Identify columns with all NA values
all_na_cols <- colnames(final_data)[colSums(is.na(final_data)) == nrow(final_data)]
# Identify columns with at least some valid data
non_na_cols <- colnames(final_data)[colSums(is.na(final_data)) < nrow(final_data)]
# Print the results
cat("Columns with all NA values:\n")
print(all_na_cols)
cat("\nColumns with at least some valid data:\n")
print(non_na_cols)
# Remove columns with all NA values from the dataset
final_data <- final_data %>% select(-all_of(all_na_cols))
library(readxl)
library(lubridate)
library(dplyr)
library(readr)
library(digest)  # for creating unique hash
# Define the directory containing characteristic data
characteristics_directory_path <- "D:/Downloads/characteristic_data"
# Define a mapping of column names to standardized names
column_mapping <- c(
"Part. #" = "Participant_Number",
"Name" = "Name",
"Team" = "Team",
"HitIQ Name" = "HitIQ_Name",
"Height1" = "Height",
"Weight1" = "Weight",
"DOB" = "Date_of_Birth",
"DateFirstMRI" = "Date_of_First_MRI",
"AgeAtFirstScan" = "Age_At_First_Scan",
"VerticalJump" = "Vertical_Jump",
"35m SprintTime" = "Sprint_Time_35m",
"1minPressUps" = "One_Minute_Press_Ups",
"Bronco (sec)" = "Bronco_Test",
"Bronco(secs)" = "Bronco_Test",
"VO2 Max" = "VO2_Max",
"Playing Position" = "Playing_Position",
"Ethnicity" = "Ethnicity",
"Handedness" = "Handedness",
"TacklePreference" = "Tackle_Preference",
"Training age" = "Training_Age",
"HighestPlayingLevel" = "Highest_Playing_Level",
"Previous Concussion" = "Previous_Concussion",
"Concussion" = "Concussion",
"Headgear" = "Headgear"
)
# Function to check for specific columns in files in the directory and raise a warning if columns are missing
check_columns_in_files <- function(directory, required_columns) {
# List all XLSX files in the directory
xlsx_files <- list.files(directory, pattern = "\\.xlsx$", full.names = TRUE)
# Create an empty list to store results
results <- list()
# Iterate over each file and check for required columns
for (file in xlsx_files) {
data <- read_excel(file)
missing_columns <- setdiff(required_columns, colnames(data))
if (length(missing_columns) > 0) {
results[[file]] <- missing_columns
warning(paste("File", file, "is missing the following required columns:", paste(missing_columns, collapse = ", ")))
} else {
results[[file]] <- "All required columns are present"
}
}
return(results)
}
# Define the required columns based on the standardized names
required_columns <- unique(column_mapping)
# Check for required columns in the files in the directory
column_check_results <- check_columns_in_files(characteristics_directory_path, required_columns)
# Print the results
print(column_check_results)
# Define expected data types for each standardized column
expected_types <- list(
"Participant_Number" = "character",
"Name" = "character",
"Team" = "character",
"HitIQ_Name" = "character",
"Height" = "numeric",
"Weight" = "numeric",
"Date_of_Birth" = "Date",
"Date_of_First_MRI" = "character",
"Age_At_First_Scan" = "numeric",
"Vertical_Jump" = "numeric",
"Sprint_Time_35m" = "numeric",
"One_Minute_Press_Ups" = "numeric",
"Bronco_Test" = "numeric",
"VO2_Max" = "numeric",
"Playing_Position" = "character",
"Ethnicity" = "character",
"Handedness" = "character",
"Tackle_Preference" = "character",
"Training_Age" = "numeric",
"Highest_Playing_Level" = "character",
"Previous_Concussion" = "character",
"Concussion" = "character",
"Headgear" = "character"
)
# Function to handle 'Date_of_Birth' column processing
fix_date_of_birth <- function(date_column) {
parsed_date <- sapply(date_column, function(x) {
if (is.na(x)) {
return(NA)
} else if (is.numeric(x)) {
# Handle Excel numeric representation of dates
return(as.Date(x, origin = "1899-12-30"))
} else {
# Try parsing known date formats
date <- suppressWarnings(parse_date_time(x, orders = c("dmy", "ymd", "Ymd")))
if (is.na(date)) {
return(NA)  # Return NA if parsing fails
} else {
return(as.Date(date))
}
}
})
return(as.Date(parsed_date, origin = "1970-01-01"))
}
# Function to enforce expected data types
enforce_data_types <- function(data, types) {
for (col in names(types)) {
if (col %in% colnames(data)) {
data[[col]] <- tryCatch({
switch(
types[[col]],
"character" = as.character(data[[col]]),
"numeric" = as.numeric(data[[col]]),
"Date" = if (col == "Date_of_Birth") fix_date_of_birth(data[[col]]) else data[[col]],
data[[col]]  # Default to no change
)
}, error = function(e) {
warning(paste("Error converting column:", col, "to type:", types[[col]], "-", e$message))
data[[col]]
})
}
}
return(data)
}
# Function to standardize column names
standardize_colnames <- function(data, mapping) {
colnames(data) <- sapply(colnames(data), function(col) {
if (col %in% names(mapping)) {
mapping[[col]]
} else {
col  # Keep original name if no mapping exists
}
})
return(data)
}
# Function to read and process files
process_characteristic_files <- function(directory, mapping, types) {
# List all XLSX files
xlsx_files <- list.files(directory, pattern = "\\.xlsx$", full.names = TRUE)
# Process XLSX files
xlsx_data <- lapply(xlsx_files, function(file) {
data <- read_excel(file, skip = 2)  # Skip first 2 rows
data <- standardize_colnames(data, mapping)
data <- enforce_data_types(data, types)  # Enforce expected types
return(data)
})
# Combine all data into a single data frame
combined_data <- bind_rows(xlsx_data)
return(combined_data)
}
# Process and clean the data
final_characteristics_data <- process_characteristic_files(characteristics_directory_path, column_mapping, expected_types)
# Remove rows with NA in Date_of_Birth
final_characteristics_data <- final_characteristics_data %>% filter(!is.na(Date_of_Birth))
# Generate unique user_ID with a maximum of 20 characters
final_characteristics_data <- final_characteristics_data %>%
mutate(
# Create a unique hash based on HitIQ_Name, Date_of_Birth, and Participant_Number
user_ID = substr(
paste0(
toupper(substr(HitIQ_Name, 1, 3)),  # First 3 letters of HitIQ_Name
format(Date_of_Birth, "%y%m%d"),   # Date of Birth in YYMMDD format
substr(Participant_Number, nchar(Participant_Number) - 3, nchar(Participant_Number)),  # Last 4 digits of Participant_Number
substr(digest(paste(HitIQ_Name, Date_of_Birth, Participant_Number)), 1, 6)  # Unique hash (first 6 characters)
),
1, 20
)
)
merged_data <- final_characteristics_data %>%
inner_join(final_data, by = c("HitIQ_Name" = "Athlete Name"))
#code to connect R to the Postgresql database
tryCatch({
conn <- dbConnect(RPostgres::Postgres(),
dbname = "Rugby",
port = 5432,
user = "postgres",
password = "Othello110!")
print("Database Connected!")
},
error=function(cond) {
print(cond)
print("Unable to connect to Database.")
})
View(merged_data)
merged_data
distinct(merged_data$Anticipated)
distinct_values <- merged_data %>%
distinct(Anticipated)
print(distinct_values)
merged_data$Collision_Approach
distinct_values <- merged_data %>%
distinct(Collision_Approach)
print(distinct_values)
merged_data$Collision_Approach
distinct_values <- merged_data %>%
distinct(Collision_Approach)
print(distinct_values, n = 100)
distinct_values <- merged_data %>%
distinct(Explaination)
print(distinct_values)
distinct_values <- merged_data %>%
distinct(`Face Position of Tackler`)
print(distinct_values)
distinct_values <- merged_data %>%
distinct(Fall)
print(distinct_values)
merged_data$`Head Position of Tackler`
distinct_values <- merged_data %>%
distinct(`Head Position of Tackler`)
print(distinct_values)
distinct_values <- merged_data %>%
distinct(`Impacted By`)
print(distinct_values)
distinct_values <- merged_data %>%
distinct(`Impacted By`)
print(distinct_values,n=200)
merged_data$Indirect
distinct_values <- merged_data %>%
distinct(Indirect)
print(distinct_values,n=200)
merged_data$`Individual Mechanism`
distinct_values <- merged_data %>%
distinct(`Individual Mechanism`)
print(distinct_values,n=200)
#individual mechanism
merged_data$`Individual Mechanism`
distinct_values <- merged_data %>%
distinct(`Individual Mechanism`)
print(distinct_values,n=400)
merged_data$`Match Action`
merged_data$`Match Action`
distinct_values <- merged_data %>%
distinct(`Match Action`)
print(distinct_values,n=400)
colnames(merged_data)
library(dplyr)
library(stringr)
# Define valid values for enumerations
valid_anticipation <- c('Good anticipation', 'Poor anticipation', 'No anticipation', 'Unknown')
valid_collision_approaches <- c('Behind', 'Side on', 'Front on', 'NA')
valid_explanation <- c('Impact occurred but cannot locate', 'Obstructed/not clear enough', 'Removed MG', 'Impact off camera', 'False result', 'NA')
valid_face_positions <- c('Face up', 'Face down', 'Face down;Face down')
valid_fall_types <- c('Controlled', 'Uncontrolled', 'NA')
valid_tackler_head <- c('Above', 'Front', 'Beside', 'Behind', 'NA')
valid_impact_cause <- c('Opposition', 'Team member', 'Environment', 'Tackle bag', 'NA')
valid_indirect <- c('Whiplash (B & F)', 'Rotation (L & R)', 'Jarring', 'Stabilising')
valid_individual_mechanism <- c('Sprinting', 'F/B COD', 'Jogging', 'Lateral COD', 'Diving', 'Passing', 'Kicking', 'In air collision', 'Landing', 'Falling', 'Standing up', 'Prone', 'Bent over', 'Upright', 'Wrestle', 'Other', 'NA')
valid_match_action <- c('1st Tackler', 'Unsuccessful tackle', 'Tackle assist', 'Ball carrier tackle', 'Ball carrier', 'Off the ball collision', 'Ball carrier latch', 'Pick and go', 'BD Bridge', 'Breakdown (BD)', 'BD Jackal', 'BD attacking cleaner', 'Bd defending cleaner', 'Scrum', 'Lineout jumper', 'Maul', 'Gathering loose ball', 'other', 'Complex tackle', 'Tackle drill', 'Other training drill', 'team run', 'Other')
valid_tackle_positions <- c('Hand/arm', 'Shoulder/chest', 'Torso/hip', 'Lower leg', 'Neck/Head', 'Upper leg', 'Hip', 'NA')
valid_verified <- c('Yes', 'No')
valid_head_impact_region <- c('Left front', 'Left front bos', 'Left side', 'Left back bos', 'Left back', 'Left chin', 'Left back bottom', 'Right front', 'Right front bos', 'Right side', 'Right back bos', 'Right back', 'Right chin', 'Right back bottom', 'Top back', 'Bottom back', 'Forehead', 'NA')
# Clean and convert columns
merged_data_clean <- merged_data %>%
mutate(
Anticipated = case_when(
!(Anticipated %in% valid_anticipation) ~ 'Unknown',
TRUE ~ Anticipated
),
Collision_Approach = case_when(
!(Collision_Approach %in% valid_collision_approaches) ~ 'NA',
TRUE ~ Collision_Approach
),
Explaination = case_when(
!(Explaination %in% valid_explanation) ~ 'NA',
TRUE ~ Explaination
),
`Face Position of Tackler` = case_when(
!(str_trim(`Face Position of Tackler`) %in% valid_face_positions) ~ 'Face down',
TRUE ~ str_trim(`Face Position of Tackler`)
),
Fall = case_when(
!(Fall %in% valid_fall_types) ~ 'NA',
TRUE ~ Fall
),
`Head Position of Tackler` = case_when(
!(str_trim(`Head Position of Tackler`) %in% valid_tackler_head) ~ 'NA',
TRUE ~ str_trim(`Head Position of Tackler`)
),
`Impacted By` = case_when(
!(str_trim(`Impacted By`) %in% valid_impact_cause) ~ 'NA',
TRUE ~ str_trim(`Impacted By`)
),
Indirect = case_when(
!(Indirect %in% valid_indirect) ~ 'NA',
TRUE ~ Indirect
),
`Individual Mechanism` = case_when(
!(str_trim(`Individual Mechanism`) %in% valid_individual_mechanism) ~ 'Other',
TRUE ~ str_trim(`Individual Mechanism`)
),
`Match Action` = case_when(
!(str_trim(`Match Action`) %in% valid_match_action) ~ 'Other',
TRUE ~ str_trim(`Match Action`)
),
`Tackle Position` = case_when(
!(str_trim(`Tackle Position`) %in% valid_tackle_positions) ~ 'NA',
TRUE ~ str_trim(`Tackle Position`)
),
Verified = case_when(
!(Verified %in% valid_verified) ~ 'No',
TRUE ~ Verified
),
`Head Impact Region` = case_when(
!(str_trim(`Head Impact Region`) %in% valid_head_impact_region) ~ 'NA',
TRUE ~ str_trim(`Head Impact Region`)
)
)
# Display distinct values after cleaning to verify the changes
distinct_values_anticipated <- merged_data_clean %>%
distinct(Anticipated)
print(distinct_values_anticipated)
distinct_values_collision <- merged_data_clean %>%
distinct(Collision_Approach)
print(distinct_values_collision)
distinct_values_explaination <- merged_data_clean %>%
distinct(Explaination)
print(distinct_values_explaination)
distinct_values_face_position <- merged_data_clean %>%
distinct(`Face Position of Tackler`)
print(distinct_values_face_position)
distinct_values_fall <- merged_data_clean %>%
distinct(Fall)
print(distinct_values_fall)
distinct_values_head_position <- merged_data_clean %>%
distinct(`Head Position of Tackler`)
print(distinct_values_head_position)
distinct_values_impacted_by <- merged_data_clean %>%
distinct(`Impacted By`)
print(distinct_values_impacted_by)
distinct_values_indirect <- merged_data_clean %>%
distinct(Indirect)
print(distinct_values_indirect)
distinct_values_individual_mechanism <- merged_data_clean %>%
distinct(`Individual Mechanism`)
print(distinct_values_individual_mechanism)
distinct_values_match_action <- merged_data_clean %>%
distinct(`Match Action`)
print(distinct_values_match_action)
distinct_values_tackle_position <- merged_data_clean %>%
distinct(`Tackle Position`)
print(distinct_values_tackle_position)
distinct_values_verified <- merged_data_clean %>%
distinct(Verified)
print(distinct_values_verified)
distinct_values_head_impact <- merged_data_clean %>%
distinct(`Head Impact Region`)
print(distinct_values_head_impact)
View(merged_data)
View(merged_data_clean)
setwd("D:/NathanielPyle.github.io")
rmarkdown::render("earthquakes_powerplants.Rmd")
rmarkdown::render("project.rmd")
rmarkdown::render("earthquakes_powerplants.Rmd")
